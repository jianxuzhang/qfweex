apply from: 'http://mirrors.taobao.net/mirror/gradle/android-parent.gradle'
group = 'com.taobao.android.weex_inspection'
version = '0.10.0.0-SNAPSHOT'

description = """network inspection protocol"""

try {
    if ('' != deployVersion) {
        version = deployVersion
        println "version: " + version
    }

} catch (java.lang.Exception e) {

}

buildscript {
    repositories {
        maven {
            url "http://mvnrepo.alibaba-inc.com/mvn/repository"
        }
    }
    dependencies {
        classpath('com.taobao.android.tools.build:gradle:1.3.3.2') {
            exclude module: 'guava'
        }
        classpath 'com.google.guava:guava:17.0'
    }
}

repositories {
    maven { url 'http://mvnrepo.alibaba-inc.com/mvn/repository' }
    mavenLocal()
    mavenCentral()
}

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 23
        versionCode 4
        versionName "1.1.3"
        consumerProguardFiles 'proguard-consumer.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java']
            }
            resources.srcDirs = ['src/main/java']
            manifest.srcFile projectDir.path+'/src/main/AndroidManifest.xml'
            res.srcDirs = ['src/main/res']
        }
    }
    tBuildConfig {
        libraryType 'aar'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.android.support:support-annotations:25.0.1'
}

publishing {
    publications {
        maven(MavenPublication) {
            // 需要自己定义产出artifact的路径，根据你的项目的产出进行配置
            artifact "${project.buildDir}/outputs/aar/${project.name}-release.aar"

            // 如果你要部署到maven仓库的artifatcId和project名称不同，需要在这里重载
            artifactId 'protocol'
        }

    }
}

android.libraryVariants.all { variant ->
    def name = variant.name.capitalize()

    task "metainf${name}"(type: Copy) {
        from rootProject.file('LICENSE')
        into "build/metainf-${name}/META-INF"
    }

    task "fatjar${name}"(type: Jar, dependsOn: [ "jar${name}", "tidyCommonsCli${name}", "metainf${name}" ]) {
        classifier = 'fatjar'
        from variant.javaCompile.destinationDir
        from "build/commons-cli-tidy-${name}"
        from "build/metainf-${name}"
    }
}
